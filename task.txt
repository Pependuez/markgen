
# В решении не стоит делать что-то сложное или хитрое. Например, всякие сложные матрицы
# и уравнения из статьи - они немного про другое.
# Тут всё можно сделать базовыми средствами Питона, которые ты уже знаешь.

# Требуется построить марковcкий генератор текстов n-го порядка
# (http://ru.wikipedia.org/wiki/Цепь_Маркова).
# Логически состоит из двух компонент - обучающей и эксплуатирующей.

# Обучающей части на вход подается список урлов, ведущих на текстовые
# файлы. Она должна скачать их, вызывая внутри curl и получая от него
# данные через пайп (использовать libcurl не надо, надо просто запустить curl как отдельный процесс). Файлы содержат текст на естественном языке. Для простоты можно обрабатывать только буквы английского языка и цифры. Пунктуацию откидываем, морфологию учитывать не нужно, стоит лишь
# привести текcт к одному регистру, чтобы повысить заполняемость цепи.
# Также задается параметр n - порядок цепи. По входному тексту строится
# марковская цепь, и сохраняется в файл (можно выдавать в стандартный
# вывод).

# Эксплуатирующей части на вход подаются начальный отрывок из n слов и
# число - количество слов, которые надо достроить по начальному отрывку и
# построенной обучающей частью марковской цепи, которую надо загрузить из
# файла. Если в какой-то момент программа не знает какую-то
# последовательность слов (не встречалась при построении марковской цепи),
# то на этом можно построение текста завершить. Вывод надо выдавать в
# поток стандартного вывода. Вход можно принимать как со стандартного
# потока ввода, так и указанием файлов и параметров в командной
# строке, но не хардкодить имена в тексте программы.
